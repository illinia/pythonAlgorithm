"""
1. 문제 이해
    1. 설명
        * 문자열에서 단어만 뒤집는다.
        * 알파벳 소문자, 숫자, 공백, 특수 문자로 이루어져있다.
        * 문자열의 시작과 끝은 공백이 아니다.
        * '<' 와 '>' 가 문자열에 있는 경우 같이 등장하며 '<' 이 먼저 등장하고 두 문자의 갯수는 같다.
        * 단어는 알파벳 소문자, 숫자로 이루어진 부분 문자열이다.
        * 태그는 단어가 아니다.
    2. 제약사항
        * 문자열 S 1 <= S <= 100,000
        * 제한 시간 1초
2. 접근 방법
    * 문자열 전부 입력 받고 처음부터 순회하면서 처리하면 O(N) 시간 걸려서 1초는 통과할 듯
    * 문자열을 뒤집어야 하는 상황은 문자열이 시작되고 끝나는 지점을 판단하여 뒤집어서 반환
    * 태그가 나온 경우 닫힐 때까지 문자열 플래그를 꺼놓고 닫히고 나서 다시 켜는 식으로 하면 될듯
    * 문자열 처리중 공백이 나온 경우 문자열이 끝이므로 저장된 문자열을 뒤집어서 반환하고 새로운 문자열 시작
3. 코드설계
    1. S 입력, 결과 문자열, 임시 저장 문자열, 문자열 플래그 저장
    2. S 를 인덱스 0 부터 반복
        1. 입력 문자가 태그인지 확인
            1. 여는 태그인 경우
                1. 임시 문자열이 있으면 결과에 뒤집은 임시 문자열 저장하고 임시 문자열 빈 값 저장
                2. 결과 문자열에 저장하고 문자열 플래그 False
            2. 닫는 태그인 경우 결과 문자열에 저장하고 문자열 플래그 True
        2. 입력 문자가 태그가 아니면 문자열 플래그 확인
            1. 문자열 플래그가 True 이면
                1. 공백이 아닌 경우 임시 저장 문자열에 저장
                2. 공백인 경우 임시 저장 문자열의 문자를 뒤집어서 결과 문자열에 저장하고 임시 문자열 초기화, 공백도 저장
            2. 문자열 플래그가 False 이면
                1. 결과 문자열에 그대로 저장
    3. 반복 완료 후 임시 저장 문자열이 비어있지 않으면 뒤집어서 결과에 저장
    4. 결과 반환
"""

from sys import stdin

# 1
S = stdin.readline().rstrip()
result = ""
temp = ""
is_string = True

# 2
for i in range(len(S)):
    s = S[i]
    # 2-1-1
    if s == '<':
        if temp:
            result += ''.join(reversed(temp))
            temp = ''
        result += s
        is_string = False
    # 2-1-2
    elif s == '>':
        result += s
        is_string = True
    # 2-2-1
    elif is_string:
        # 2-2-1-1
        if s != ' ':
            temp += s
        # 2-2-1-2
        else:
            result += ''.join(reversed(temp))
            temp = ''
            result += ' '
    # 2-2-2
    else:
        result += s

if temp:
    result += ''.join(reversed(temp))

print(result)









