"""
1. 문제 이해
    1. 설명
        * 수열이 주어졌을 때 증가하는 부분 수열중에서 합이 가장 큰 것을 구하기
    2. 제약사항
        * 1 <= N 수열의 크기 <= 1,000
        * 1 <= 수열의 요소 <= 1,000
2. 접근 방법
    * 이전의 데이터가 현재 선택에 영향을 주므로 dp 로 푼다
    * dp 테이블에 각 요소의 최대 부분 수열 합을 저장한다
    * 이전 최대 합을 구하기 위해 이전 dp 값들을 전부 순회해야한다
    * 현재 값이 이전의 어떤 값보다 크면, 현재 dp 값과 이전 dp 값 + 현재 값중 큰 값을 현재 dp 값에 넣는다.
3. 코드 설계
    1. 수열 크기 N 입력, 수열 리스트 입력
    2. dp 테이블 리스트로 생성, 첫번째 값은 수열 첫번째 값으로 저장
    3. 2번 인덱스부터 수열 마지막 인덱스 N - 1 까지 반복
        1. 첫번째 인덱스부터 현재 반복중인 인덱스 전까지 이중 반복
            1. 현재 수열 값이 이중 반복중인 수열의 값보다 크면
            2. 현재 dp 테이블 값에 현재 dp 값과 이중 반복 dp 테이블 값 + 현재 수열 값 중 큰 값 저장
    4. dp 테이블에서 가장 큰 값 출력
"""
N = int(input())
A = list(map(int, input().split()))

dp = A[:]

for i in range(N):
    for j in range(i):
        if A[i] > A[j]:
            dp[i] = max(dp[i], dp[j] + A[i])

print(max(dp))