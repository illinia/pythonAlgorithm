"""
1. 문제 이해
    1. 설명
        * 카드팩에 들어있는 카드 갯수에 따라 종류가 나눠진다.
        * 갯수에 따른 팩의 가격이 각각 다르다
        * 특정 갯수를 얻기 위해 지불하는 금액을 최대로 한다
        * 구매한 카드의 갯수가 정확히 원하는 갯수와 일치해야한다.
    2. 제약사항
        * 1 <= N <= 1,000
        * 1 <= 금액 <= 10,000
2. 접근 방법
    * 특정 갯수를 구매하는데 최댓값을 구할 때 0 부터 특정 갯수까지의 수와 필요한 나머지 갯수의 최댓값들을
      dp 테이블에서 불러와서 계산하고 현재 dp 테이블 값과 비교하여 큰 값을 저장하면 될듯
    * 예시 : 4 의 최댓값을 구할 때 0 부터 3까지 반복
        1. 4 - 0, 0 의 dp 테이블 값을 불러와 더한 후 dp 테이블에서 4의 값과 비교하여 큰 값을 저장
        2. 4 - 1, 1 도 마찬가지
    * dp 테이블에 0 키는 0 값으로 저장하고 주어진 값들을 dp 테이블에 초기화할 필요가 있음
    * 1부터 시작하여 원하는 숫자까지 반복
    * 점화식 : dp[i] = dp[i - a] + dp[a], 0 <= a <= N, dp[0] = 0
3. 코드 설계
    1. N 입력, dp 테이블 생성, dp 테이블 0은 0으로 저장
    2. graph 에 카드팩의 값을 1부터 저장
    3. 1부터 N 까지 반복 i
        1. 다시 1부터 i 까지 반복 j
            1. dp[i - j] + dp[j] 와 dp[i] 중 큰 값을 dp[i] 에 저장
    4. dp[N] 출력
"""
N = int(input())
dp = [0]

graph = list(map(int, input().split()))
dp = dp + graph

for i in range(1, N + 1):
    for j in range(1, i // 2 + 1):
        dp[i] = max(dp[i - j] + dp[j], dp[i])

print(dp[N])