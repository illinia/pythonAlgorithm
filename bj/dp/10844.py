"""
1. 문제 이해
    1. 설명
        * 예로 45656 은 인접한 모든 자리의 차이가 1. 이런 수를 계단 수라고 한다.
        * N 이 주어질 때 길이가 N 인 계단수는 몇개인지 구하기.
    2. 제약사항
        * 0 으로 시작하는 수는 계단수가 아니다
        * 1 <= N <= 100
        * 출력시 정답은 1,000,000,000 으로 나눈 나머지를 출력
2. 접근 방법
    * 앞의 수가 현재 수에 영향을 주므로 dp 로 풀어본다.
    # * 1의 자리에서는 1 ~ 9 까지 이므로 9개
    # * 2의 자리에서는 1 ~ 9 까지 9개 수에서 +1, -1 한 수 중 3자리가 되는 1가지 경우를 -1 해서 9 * 2 - 1 = 17
    # * 3의 자리에서는 2자리 17 개중 10 에서 -1, 89 에서 + 1 할 경우 제외하면 17 * 2 - 2 = 32
    # * 점화식 dp[i] = dp[i - 1] * 2 - 1, d[1] = 9
    * dp 테이블에 순서를 각 자리수로 매핑하고 2차원 배열 리스트는 0 ~ 9 까지 마지막 자리일때 구할 수 있는 갯수라고 생각
    * dp 테이블을 2차원 배열로 1차원에는 N 개 만큼 리스트를 만들고 2차원 배열에는 0을 10개 초기화
    * dp[0] 은 1의 자리수로 매핑 0,1,1,...,1 0 부터 9까지일때 경우의 수
    * 반복문으로 1부터 N - 1 까지 반복 i
    * 마지막 수를 0 부터 9까지 경우의 수를 생각해야하므로 2중 반복 j
    * j 가 0 일때는 [i - 1][j + 1] 값을 [i][j] 에 저장(마지막 수가 1인 경우에만 0이 올 수 있다)
    * j 가 9 일때는 [i - 1][j - 1] 값을 [i][j] 에 저장(마지막 수가 8인 경우에만 9가 올 수 있다)
    * 나머지 경우의 수는 dp[i][j] = dp[i-1][j-1] + dp[i-1][j+1]
3. 코드 설계
    # 1. N 입력
    # 2. dp[0] = 0, dp[1] = 9, dp[2] = 17 으로 리스트 초기화
    # 3. 2부터 N 만큼 반복
    #     1. dp 테이블에 dp[i - 1] * 2 - 1 추가
    # 4. dp[N] 출력
    1. N 입력
    2. dp 테이블을 2차원 테이블로 초기화, 1차원 배열 갯수는 N개, 2차원 배열 갯수는 10개(0~9)
    3. 1자리인 경우 1~9개 경우로 1개씩 가능하므로 dp[0] = [0,1,1,1,1,1,1,1,1,1]
    4. 1부터 N - 1까지 반복 i
        1. 0부터 9까지 반복 j
            1. j == 0, dp[i][j] = dp[i - 1][j + 1]
            2. j == 9, dp[i][j] = dp[i - 1][j - 1]
            3. else, dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j + 1]
    5. dp[N]의 값들을 전부 더하고 1,000,000,000 로 나누어 출력
"""
N = int(input())
dp = [[0] * 10 for _ in range(N)]
dp[0] = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1]

for i in range(1, N):
    for j in range(10):
        if j == 0: dp[i][j] = dp[i - 1][j + 1]
        elif j == 9: dp[i][j] = dp[i - 1][j - 1]
        else: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j + 1]
print(sum(dp[N - 1]) % 1000000000)

# N = int(input())
# dp = list()
# dp.append(0)
# dp.append(9)
# dp.append(17)
#
# for i in range(3, N + 1):
#     dp.append((dp[i - 1] * 2 - 2) % 1000000000)
# print(dp[N])
