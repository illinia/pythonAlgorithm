"""
1. 문제 이해
    1. 설명
        * 오르막 수는 수의 자리가 오름차순을 이루는 수를 말한다. 인접한 수가 같아도 오름차순으로 친다.
        * 수의 길이 N 이 주어졌을 때 오르막 갯수를 구하기.
    2. 제약사항
        * 수는 0으로 시작할 수 있다.
        * 1 <= N <= 1000
        * 출력시 N 인 오르막 갯수를 10,007로 나눈 나머지를 출력
2. 접근 방법
    * 이전 수의 경우의 수가 현재 수에 영향을 미치므로 dp 로 해결
    * N == 1, 0 ~ 9 까지 10개
    # * N == 2, 0 ~ 9 까지 1자리와 같은 수 10개 + 이전 자리보다 큰 수의 갯수
    #     0 보다 큰 갯수 = 1 ~ 9 = 9개 -> 9 - 0
    #     1 보다 큰 갯수 = 2 ~ 9 = 8개 -> 9 - 1
    #     n 보다 큰 갯수 = 9 - n 개
    #     각 자리별로 이전 수를 포함하기로 생각을 해서
    #     0 의 경우 0 ~ 9 = 10개
    #     1 의 경우 1 ~ 9 = 9개
    # * N == n 인 경우
    #     dp[n - 1] 에서 0 ~ 9 까지 갯수를 구해야하므로 반복문으로 j
    #     dp[n][j] = dp[n - 1][j] * (j + 1)
    * 현재 자리보다 작거나 같은 이전 자리의 경우의 수의 값들을 더한게 현재 자리의 경우의 수
    * 예로 2자리가 2인 경우
        02, 12, 22
    * 예로 3자리가 2인 경우
        002, 012, 112, 022, 122, 222 (앞자리가 0, 1, 2인 경우의 수를 더한게 현재 자리 경우의 수)
    * dp[i][j] = sum(dp[i-1][0:j+1])
3. 코드 설계
    1. N 입력
    2. dp 테이블 2차원 배열로 초기화(1차원 갯수는 N개, 2차원 갯수는 10개, 2차원 요소는 전부 0 으로 초기화)
    3. dp[0] = [1] * 10
    4. 1 부터 N - 1 까지 반복 i
        1. 0부터 9까지 반복 j
            dp[i][j] = sum(dp[i-1][0:j+1])
    5. dp[N - 1] 의 합 출력
"""
N = int(input())
dp = [[0] * 10 for _ in range(N)]
dp[0] = [1] * 10
for i in range(1, N):
    for j in range(10):
        dp[i][j] = sum(dp[i-1][0:j+1])
print(sum(dp[N - 1]) % 10007)